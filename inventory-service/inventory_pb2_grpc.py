# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import inventory_pb2 as inventory__pb2


class InventoryServiceStub(object):
    """Inventory Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateInventoryItem = channel.unary_unary(
                '/inventory.InventoryService/CreateInventoryItem',
                request_serializer=inventory__pb2.CreateInventoryItemRequest.SerializeToString,
                response_deserializer=inventory__pb2.InventoryItemResponse.FromString,
                )
        self.GetInventoryItem = channel.unary_unary(
                '/inventory.InventoryService/GetInventoryItem',
                request_serializer=inventory__pb2.GetInventoryItemRequest.SerializeToString,
                response_deserializer=inventory__pb2.InventoryItemResponse.FromString,
                )
        self.UpdateInventoryItem = channel.unary_unary(
                '/inventory.InventoryService/UpdateInventoryItem',
                request_serializer=inventory__pb2.UpdateInventoryItemRequest.SerializeToString,
                response_deserializer=inventory__pb2.InventoryItemResponse.FromString,
                )
        self.ListInventoryItems = channel.unary_unary(
                '/inventory.InventoryService/ListInventoryItems',
                request_serializer=inventory__pb2.ListInventoryItemsRequest.SerializeToString,
                response_deserializer=inventory__pb2.ListInventoryItemsResponse.FromString,
                )
        self.CheckStock = channel.unary_unary(
                '/inventory.InventoryService/CheckStock',
                request_serializer=inventory__pb2.CheckStockRequest.SerializeToString,
                response_deserializer=inventory__pb2.CheckStockResponse.FromString,
                )
        self.ReserveStock = channel.unary_unary(
                '/inventory.InventoryService/ReserveStock',
                request_serializer=inventory__pb2.ReserveStockRequest.SerializeToString,
                response_deserializer=inventory__pb2.ReserveStockResponse.FromString,
                )
        self.ReleaseStock = channel.unary_unary(
                '/inventory.InventoryService/ReleaseStock',
                request_serializer=inventory__pb2.ReleaseStockRequest.SerializeToString,
                response_deserializer=inventory__pb2.ReleaseStockResponse.FromString,
                )


class InventoryServiceServicer(object):
    """Inventory Service
    """

    def CreateInventoryItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInventoryItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateInventoryItem(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListInventoryItems(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReserveStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InventoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateInventoryItem': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateInventoryItem,
                    request_deserializer=inventory__pb2.CreateInventoryItemRequest.FromString,
                    response_serializer=inventory__pb2.InventoryItemResponse.SerializeToString,
            ),
            'GetInventoryItem': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInventoryItem,
                    request_deserializer=inventory__pb2.GetInventoryItemRequest.FromString,
                    response_serializer=inventory__pb2.InventoryItemResponse.SerializeToString,
            ),
            'UpdateInventoryItem': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateInventoryItem,
                    request_deserializer=inventory__pb2.UpdateInventoryItemRequest.FromString,
                    response_serializer=inventory__pb2.InventoryItemResponse.SerializeToString,
            ),
            'ListInventoryItems': grpc.unary_unary_rpc_method_handler(
                    servicer.ListInventoryItems,
                    request_deserializer=inventory__pb2.ListInventoryItemsRequest.FromString,
                    response_serializer=inventory__pb2.ListInventoryItemsResponse.SerializeToString,
            ),
            'CheckStock': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckStock,
                    request_deserializer=inventory__pb2.CheckStockRequest.FromString,
                    response_serializer=inventory__pb2.CheckStockResponse.SerializeToString,
            ),
            'ReserveStock': grpc.unary_unary_rpc_method_handler(
                    servicer.ReserveStock,
                    request_deserializer=inventory__pb2.ReserveStockRequest.FromString,
                    response_serializer=inventory__pb2.ReserveStockResponse.SerializeToString,
            ),
            'ReleaseStock': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseStock,
                    request_deserializer=inventory__pb2.ReleaseStockRequest.FromString,
                    response_serializer=inventory__pb2.ReleaseStockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'inventory.InventoryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InventoryService(object):
    """Inventory Service
    """

    @staticmethod
    def CreateInventoryItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inventory.InventoryService/CreateInventoryItem',
            inventory__pb2.CreateInventoryItemRequest.SerializeToString,
            inventory__pb2.InventoryItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInventoryItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inventory.InventoryService/GetInventoryItem',
            inventory__pb2.GetInventoryItemRequest.SerializeToString,
            inventory__pb2.InventoryItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateInventoryItem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inventory.InventoryService/UpdateInventoryItem',
            inventory__pb2.UpdateInventoryItemRequest.SerializeToString,
            inventory__pb2.InventoryItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListInventoryItems(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inventory.InventoryService/ListInventoryItems',
            inventory__pb2.ListInventoryItemsRequest.SerializeToString,
            inventory__pb2.ListInventoryItemsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inventory.InventoryService/CheckStock',
            inventory__pb2.CheckStockRequest.SerializeToString,
            inventory__pb2.CheckStockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReserveStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inventory.InventoryService/ReserveStock',
            inventory__pb2.ReserveStockRequest.SerializeToString,
            inventory__pb2.ReserveStockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReleaseStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inventory.InventoryService/ReleaseStock',
            inventory__pb2.ReleaseStockRequest.SerializeToString,
            inventory__pb2.ReleaseStockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class OrderServiceStub(object):
    """Order Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateOrder = channel.unary_unary(
                '/inventory.OrderService/CreateOrder',
                request_serializer=inventory__pb2.CreateOrderRequest.SerializeToString,
                response_deserializer=inventory__pb2.OrderResponse.FromString,
                )
        self.GetOrder = channel.unary_unary(
                '/inventory.OrderService/GetOrder',
                request_serializer=inventory__pb2.GetOrderRequest.SerializeToString,
                response_deserializer=inventory__pb2.OrderResponse.FromString,
                )
        self.ListOrders = channel.unary_unary(
                '/inventory.OrderService/ListOrders',
                request_serializer=inventory__pb2.ListOrdersRequest.SerializeToString,
                response_deserializer=inventory__pb2.ListOrdersResponse.FromString,
                )
        self.UpdateOrderStatus = channel.unary_unary(
                '/inventory.OrderService/UpdateOrderStatus',
                request_serializer=inventory__pb2.UpdateOrderStatusRequest.SerializeToString,
                response_deserializer=inventory__pb2.OrderResponse.FromString,
                )


class OrderServiceServicer(object):
    """Order Service
    """

    def CreateOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateOrderStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrder,
                    request_deserializer=inventory__pb2.CreateOrderRequest.FromString,
                    response_serializer=inventory__pb2.OrderResponse.SerializeToString,
            ),
            'GetOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrder,
                    request_deserializer=inventory__pb2.GetOrderRequest.FromString,
                    response_serializer=inventory__pb2.OrderResponse.SerializeToString,
            ),
            'ListOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.ListOrders,
                    request_deserializer=inventory__pb2.ListOrdersRequest.FromString,
                    response_serializer=inventory__pb2.ListOrdersResponse.SerializeToString,
            ),
            'UpdateOrderStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateOrderStatus,
                    request_deserializer=inventory__pb2.UpdateOrderStatusRequest.FromString,
                    response_serializer=inventory__pb2.OrderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'inventory.OrderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OrderService(object):
    """Order Service
    """

    @staticmethod
    def CreateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inventory.OrderService/CreateOrder',
            inventory__pb2.CreateOrderRequest.SerializeToString,
            inventory__pb2.OrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inventory.OrderService/GetOrder',
            inventory__pb2.GetOrderRequest.SerializeToString,
            inventory__pb2.OrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inventory.OrderService/ListOrders',
            inventory__pb2.ListOrdersRequest.SerializeToString,
            inventory__pb2.ListOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateOrderStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inventory.OrderService/UpdateOrderStatus',
            inventory__pb2.UpdateOrderStatusRequest.SerializeToString,
            inventory__pb2.OrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
